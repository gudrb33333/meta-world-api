plugins {
	id 'java'
	id 'org.springframework.boot' version '2.5.14'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'jacoco'
}

jacoco {
	toolVersion = "0.8.7"
}

group = 'click.gudrb33333'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

ext {
	appVersion = version
}

processResources {
	filesMatching('**/application.yaml') {
		expand(project.properties)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.session:spring-session-core'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	// Swagger 3
	implementation "io.springfox:springfox-boot-starter:3.0.0"
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

test {
	// finalizedBy : 이(test) 작업에 대해 주어진 종료자 작업을 추가
	finalizedBy jacocoTestReport // test 작업이 끝나고 jacocoTestReport를 실행
	useJUnitPlatform()
}

jacocoTestReport {
	reports {
		xml.required = false
		csv.required = false
		html.required = true
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'

			limit {
				counter = 'METHOD'
				value = 'COVEREDRATIO'
				minimum = 0.5
			}
		}

	}
}

